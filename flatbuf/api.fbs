namespace Api;

union Object { SimpleAsset, Asset, Domain, Account, Peer }
union Command { Add, Transfer, Update, Remove, Batch, Unbatch, Contract }

table Permission {
    readable: bool(required); // queryable
    writeable: bool(required); // commandable
    isRoot: bool(required);
    publicKey:string(required);
}

table Add {
    object: Object(required);
}

table Transfer {
    object: Object(required);
    receiver: string(required);
}

table Update {
    object: Object(required);
}

table Remove {
    object: Object(required);
}

table TransactionResponse {
  message:string;
  code:ushort;
  transaction:[Api.Transaction];
}

table RecieverConfirmation {
  signature:Api.Signature; // hash can be computed separately
  timestamp:ulong;
}

table AssetResponse {
  message:string;
  code:ushort;
  timestamp:ulong;
  asset:Api.Asset;
  simpleAsset:Api.SimpleAsset;
  domain:Api.Domain;
  account:Api.Account;
}

table PeerResponse {
  message:string;
  code:ushort;
  timestamp:ulong;
  peer:Api.Peer;
}

table StatusResponse {
  value:string;
  message:string;
  timestamp:ulong;
  confirm:Api.RecieverConfirmation;
}

table Query {
  type:string;
  senderPubkey:string;
}

table KeyValueObject {
  key: string;
  value:Api.ValueObject;
}

table ValueObject {
  valueString: string;
  value: ulong;
  precision: uint;
  valueBoolean: bool;
  object: ValueObject;
}

table Currency {
  domain: Domain(required);
  name: string(required);
  amount: ulong;
  precision: uint;
  description: string;
  tag: string; // For example, XBT, IRH, YNZ
  ledgerId: string;
}

table Message {
    text: string(required);
}

table KeyValueListAsset {
  domain: Domain(required);
  name: string;
  description: string;
  tag: string;
  ledgerId: string;
  keyValueList: [Api.KeyValueObject];
  permissions: Api.Permission;
}

table Domain {
  name: string(required);
  permissions: [Permission];
}

table Account {
  publicKey: string;
  alias: string;
  domains: [Api.Domain];
}

table Trust {
  value: ulong;
  isOk: bool;
}

table Peer {
  publicKey: string;
  address: string;
  trust: Api.Trust;
}

table Signature {
  publicKey:string;
  signature:string;
}

table Transaction {
  command: Command(required);

  signatures:[Api.Signature];
  type:string;
  creatorPubKey:string;
  hash:string;
  timestamp:ulong;
  asset:Api.Asset;
  simpleAsset:Api.SimpleAsset;
  domain:Api.Domain;
  account:Api.Account;
  peer:Api.Peer;
  receivePubkey:string;
}

table ConsensusEvent {
  signatures: [Api.Signature];
  transaction:Api.Transaction;
  order:ulong;
  status:string;
}

root_type ConsensusEvent;

file_identifier "IRH";
file_extension "iroha";
