// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: endpoint
#ifndef GRPC_endpoint__INCLUDED
#define GRPC_endpoint__INCLUDED

#include "endpoint_generated.h"
#include "flatbuffers/grpc.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace iroha {

class Sumeragi GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Torii(::grpc::ClientContext* context, const flatbuffers::BufferRef<Transaction>& request, flatbuffers::BufferRef<Response>* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>> AsyncTorii(::grpc::ClientContext* context, const flatbuffers::BufferRef<Transaction>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>>(AsyncToriiRaw(context, request, cq));
    }
    virtual ::grpc::Status Verify(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, flatbuffers::BufferRef<Response>* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>> AsyncVerify(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>>(AsyncVerifyRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>* AsyncToriiRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Transaction>& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>* AsyncVerifyRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Torii(::grpc::ClientContext* context, const flatbuffers::BufferRef<Transaction>& request, flatbuffers::BufferRef<Response>* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>> AsyncTorii(::grpc::ClientContext* context, const flatbuffers::BufferRef<Transaction>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>>(AsyncToriiRaw(context, request, cq));
    }
    ::grpc::Status Verify(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, flatbuffers::BufferRef<Response>* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>> AsyncVerify(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>>(AsyncVerifyRaw(context, request, cq));
    }
  
   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* AsyncToriiRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Transaction>& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* AsyncVerifyRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_Torii_;
    const ::grpc::RpcMethod rpcmethod_Verify_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
  
  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Torii(::grpc::ServerContext* context, const flatbuffers::BufferRef<Transaction>* request, flatbuffers::BufferRef<Response>* response);
    virtual ::grpc::Status Verify(::grpc::ServerContext* context, const flatbuffers::BufferRef<ConsensusEvent>* request, flatbuffers::BufferRef<Response>* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Torii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Torii() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Torii() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Torii(::grpc::ServerContext* context, const flatbuffers::BufferRef<Transaction>* request, flatbuffers::BufferRef<Response>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTorii(::grpc::ServerContext* context, flatbuffers::BufferRef<Transaction>* request, ::grpc::ServerAsyncResponseWriter< flatbuffers::BufferRef<Response>>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Verify() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Verify() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const flatbuffers::BufferRef<ConsensusEvent>* request, flatbuffers::BufferRef<Response>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, flatbuffers::BufferRef<ConsensusEvent>* request, ::grpc::ServerAsyncResponseWriter< flatbuffers::BufferRef<Response>>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef   WithAsyncMethod_Torii<  WithAsyncMethod_Verify<  Service   >   >   AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Torii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Torii() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Torii() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Torii(::grpc::ServerContext* context, const flatbuffers::BufferRef<Transaction>* request, flatbuffers::BufferRef<Response>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Verify() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Verify() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const flatbuffers::BufferRef<ConsensusEvent>* request, flatbuffers::BufferRef<Response>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

class AssetRepository GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AccountGetAsset(::grpc::ClientContext* context, const flatbuffers::BufferRef<AssetQuery>& request, flatbuffers::BufferRef<AssetResponse>* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<AssetResponse>>> AsyncAccountGetAsset(::grpc::ClientContext* context, const flatbuffers::BufferRef<AssetQuery>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<AssetResponse>>>(AsyncAccountGetAssetRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<AssetResponse>>* AsyncAccountGetAssetRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<AssetQuery>& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AccountGetAsset(::grpc::ClientContext* context, const flatbuffers::BufferRef<AssetQuery>& request, flatbuffers::BufferRef<AssetResponse>* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<AssetResponse>>> AsyncAccountGetAsset(::grpc::ClientContext* context, const flatbuffers::BufferRef<AssetQuery>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<AssetResponse>>>(AsyncAccountGetAssetRaw(context, request, cq));
    }
  
   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<AssetResponse>>* AsyncAccountGetAssetRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<AssetQuery>& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_AccountGetAsset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
  
  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AccountGetAsset(::grpc::ServerContext* context, const flatbuffers::BufferRef<AssetQuery>* request, flatbuffers::BufferRef<AssetResponse>* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AccountGetAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AccountGetAsset() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AccountGetAsset() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountGetAsset(::grpc::ServerContext* context, const flatbuffers::BufferRef<AssetQuery>* request, flatbuffers::BufferRef<AssetResponse>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccountGetAsset(::grpc::ServerContext* context, flatbuffers::BufferRef<AssetQuery>* request, ::grpc::ServerAsyncResponseWriter< flatbuffers::BufferRef<AssetResponse>>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef   WithAsyncMethod_AccountGetAsset<  Service   >   AsyncService;
  template <class BaseClass>
  class WithGenericMethod_AccountGetAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AccountGetAsset() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AccountGetAsset() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountGetAsset(::grpc::ServerContext* context, const flatbuffers::BufferRef<AssetQuery>* request, flatbuffers::BufferRef<AssetResponse>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

class Hijiri GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Kagami(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<Response>* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>> AsyncKagami(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>>(AsyncKagamiRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<Response>>* AsyncKagamiRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Kagami(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<Response>* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>> AsyncKagami(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>>(AsyncKagamiRaw(context, request, cq));
    }
  
   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* AsyncKagamiRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_Kagami_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
  
  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Kagami(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<Response>* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Kagami : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Kagami() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Kagami() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kagami(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<Response>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKagami(::grpc::ServerContext* context, flatbuffers::BufferRef<Ping>* request, ::grpc::ServerAsyncResponseWriter< flatbuffers::BufferRef<Response>>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef   WithAsyncMethod_Kagami<  Service   >   AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Kagami : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Kagami() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Kagami() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kagami(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<Response>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

class Sync GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status checkHash(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<CheckHashResponse>* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<CheckHashResponse>>> AsynccheckHash(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<CheckHashResponse>>>(AsynccheckHashRaw(context, request, cq));
    }
    virtual ::grpc::Status getPeers(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<PeersResponse>* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<PeersResponse>>> AsyncgetPeers(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<PeersResponse>>>(AsyncgetPeersRaw(context, request, cq));
    }
    virtual ::grpc::Status getTransactions(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<TransactionResponse>* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<TransactionResponse>>> AsyncgetTransactions(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<TransactionResponse>>>(AsyncgetTransactionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< flatbuffers::BufferRef<TxWithIndex>>> fetchStreamTransaction(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< flatbuffers::BufferRef<TxWithIndex>>>(fetchStreamTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< flatbuffers::BufferRef<TxWithIndex>>> AsyncfetchStreamTransaction(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< flatbuffers::BufferRef<TxWithIndex>>>(AsyncfetchStreamTransactionRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<CheckHashResponse>>* AsynccheckHashRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<PeersResponse>>* AsyncgetPeersRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< flatbuffers::BufferRef<TransactionResponse>>* AsyncgetTransactionsRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< flatbuffers::BufferRef<TxWithIndex>>* fetchStreamTransactionRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< flatbuffers::BufferRef<TxWithIndex>>* AsyncfetchStreamTransactionRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status checkHash(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<CheckHashResponse>* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<CheckHashResponse>>> AsynccheckHash(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<CheckHashResponse>>>(AsynccheckHashRaw(context, request, cq));
    }
    ::grpc::Status getPeers(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<PeersResponse>* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<PeersResponse>>> AsyncgetPeers(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<PeersResponse>>>(AsyncgetPeersRaw(context, request, cq));
    }
    ::grpc::Status getTransactions(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<TransactionResponse>* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<TransactionResponse>>> AsyncgetTransactions(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<TransactionResponse>>>(AsyncgetTransactionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< flatbuffers::BufferRef<TxWithIndex>>> fetchStreamTransaction(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request) {
      return std::unique_ptr< ::grpc::ClientReader< flatbuffers::BufferRef<TxWithIndex>>>(fetchStreamTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< flatbuffers::BufferRef<TxWithIndex>>> AsyncfetchStreamTransaction(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< flatbuffers::BufferRef<TxWithIndex>>>(AsyncfetchStreamTransactionRaw(context, request, cq, tag));
    }
  
   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<CheckHashResponse>>* AsynccheckHashRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<PeersResponse>>* AsyncgetPeersRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<TransactionResponse>>* AsyncgetTransactionsRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< flatbuffers::BufferRef<TxWithIndex>>* fetchStreamTransactionRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< flatbuffers::BufferRef<TxWithIndex>>* AsyncfetchStreamTransactionRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_checkHash_;
    const ::grpc::RpcMethod rpcmethod_getPeers_;
    const ::grpc::RpcMethod rpcmethod_getTransactions_;
    const ::grpc::RpcMethod rpcmethod_fetchStreamTransaction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
  
  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status checkHash(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<CheckHashResponse>* response);
    virtual ::grpc::Status getPeers(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<PeersResponse>* response);
    virtual ::grpc::Status getTransactions(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<TransactionResponse>* response);
    virtual ::grpc::Status fetchStreamTransaction(::grpc::ServerContext* context, const flatbuffers::BufferRef<TxRequest>* request, ::grpc::ServerWriter< flatbuffers::BufferRef<TxWithIndex>>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_checkHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_checkHash() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_checkHash() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkHash(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<CheckHashResponse>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckHash(::grpc::ServerContext* context, flatbuffers::BufferRef<Ping>* request, ::grpc::ServerAsyncResponseWriter< flatbuffers::BufferRef<CheckHashResponse>>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getPeers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getPeers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPeers(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<PeersResponse>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPeers(::grpc::ServerContext* context, flatbuffers::BufferRef<Ping>* request, ::grpc::ServerAsyncResponseWriter< flatbuffers::BufferRef<PeersResponse>>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getTransactions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getTransactions() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransactions(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<TransactionResponse>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTransactions(::grpc::ServerContext* context, flatbuffers::BufferRef<Ping>* request, ::grpc::ServerAsyncResponseWriter< flatbuffers::BufferRef<TransactionResponse>>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_fetchStreamTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_fetchStreamTransaction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_fetchStreamTransaction() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchStreamTransaction(::grpc::ServerContext* context, const flatbuffers::BufferRef<TxRequest>* request, ::grpc::ServerWriter< flatbuffers::BufferRef<TxWithIndex>>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfetchStreamTransaction(::grpc::ServerContext* context, flatbuffers::BufferRef<TxRequest>* request, ::grpc::ServerAsyncWriter< flatbuffers::BufferRef<TxWithIndex>>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef   WithAsyncMethod_checkHash<  WithAsyncMethod_getPeers<  WithAsyncMethod_getTransactions<  WithAsyncMethod_fetchStreamTransaction<  Service   >   >   >   >   AsyncService;
  template <class BaseClass>
  class WithGenericMethod_checkHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_checkHash() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_checkHash() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkHash(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<CheckHashResponse>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getPeers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getPeers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPeers(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<PeersResponse>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getTransactions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getTransactions() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransactions(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<TransactionResponse>* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_fetchStreamTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_fetchStreamTransaction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_fetchStreamTransaction() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchStreamTransaction(::grpc::ServerContext* context, const flatbuffers::BufferRef<TxRequest>* request, ::grpc::ServerWriter< flatbuffers::BufferRef<TxWithIndex>>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace iroha


#endif  // GRPC_endpoint__INCLUDED
