// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: endpoint

#include "endpoint_generated.h"
#include "endpoint.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace iroha {

static const char* Sumeragi_method_names[] = {
  "/iroha.Sumeragi/Torii",
  "/iroha.Sumeragi/Verify",
};

std::unique_ptr< Sumeragi::Stub> Sumeragi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Sumeragi::Stub> stub(new Sumeragi::Stub(channel));
  return stub;
}

Sumeragi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Torii_(Sumeragi_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(Sumeragi_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status Sumeragi::Stub::Torii(::grpc::ClientContext* context, const flatbuffers::BufferRef<Transaction>& request, flatbuffers::BufferRef<Response>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Torii_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* Sumeragi::Stub::AsyncToriiRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Transaction>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>(channel_.get(), cq, rpcmethod_Torii_, context, request);
}

::grpc::Status Sumeragi::Stub::Verify(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, flatbuffers::BufferRef<Response>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Verify_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* Sumeragi::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>(channel_.get(), cq, rpcmethod_Verify_, context, request);
}

Sumeragi::Service::Service() {
  (void)Sumeragi_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Sumeragi_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sumeragi::Service, flatbuffers::BufferRef<Transaction>, flatbuffers::BufferRef<Response>>(
          std::mem_fn(&Sumeragi::Service::Torii), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Sumeragi_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sumeragi::Service, flatbuffers::BufferRef<ConsensusEvent>, flatbuffers::BufferRef<Response>>(
          std::mem_fn(&Sumeragi::Service::Verify), this)));
}

Sumeragi::Service::~Service() {
}

::grpc::Status Sumeragi::Service::Torii(::grpc::ServerContext* context, const flatbuffers::BufferRef<Transaction>* request, flatbuffers::BufferRef<Response>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sumeragi::Service::Verify(::grpc::ServerContext* context, const flatbuffers::BufferRef<ConsensusEvent>* request, flatbuffers::BufferRef<Response>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AssetRepository_method_names[] = {
  "/iroha.AssetRepository/AccountGetAsset",
};

std::unique_ptr< AssetRepository::Stub> AssetRepository::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< AssetRepository::Stub> stub(new AssetRepository::Stub(channel));
  return stub;
}

AssetRepository::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_AccountGetAsset_(AssetRepository_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status AssetRepository::Stub::AccountGetAsset(::grpc::ClientContext* context, const flatbuffers::BufferRef<AssetQuery>& request, flatbuffers::BufferRef<AssetResponse>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AccountGetAsset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<AssetResponse>>* AssetRepository::Stub::AsyncAccountGetAssetRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<AssetQuery>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<AssetResponse>>(channel_.get(), cq, rpcmethod_AccountGetAsset_, context, request);
}

AssetRepository::Service::Service() {
  (void)AssetRepository_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      AssetRepository_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< AssetRepository::Service, flatbuffers::BufferRef<AssetQuery>, flatbuffers::BufferRef<AssetResponse>>(
          std::mem_fn(&AssetRepository::Service::AccountGetAsset), this)));
}

AssetRepository::Service::~Service() {
}

::grpc::Status AssetRepository::Service::AccountGetAsset(::grpc::ServerContext* context, const flatbuffers::BufferRef<AssetQuery>* request, flatbuffers::BufferRef<AssetResponse>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Hijiri_method_names[] = {
  "/iroha.Hijiri/Kagami",
};

std::unique_ptr< Hijiri::Stub> Hijiri::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Hijiri::Stub> stub(new Hijiri::Stub(channel));
  return stub;
}

Hijiri::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Kagami_(Hijiri_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status Hijiri::Stub::Kagami(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<Response>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Kagami_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* Hijiri::Stub::AsyncKagamiRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>(channel_.get(), cq, rpcmethod_Kagami_, context, request);
}

Hijiri::Service::Service() {
  (void)Hijiri_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Hijiri_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Hijiri::Service, flatbuffers::BufferRef<Ping>, flatbuffers::BufferRef<Response>>(
          std::mem_fn(&Hijiri::Service::Kagami), this)));
}

Hijiri::Service::~Service() {
}

::grpc::Status Hijiri::Service::Kagami(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<Response>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Sync_method_names[] = {
  "/iroha.Sync/checkHash",
  "/iroha.Sync/getPeers",
  "/iroha.Sync/getTransactions",
  "/iroha.Sync/fetchStreamTransaction",
};

std::unique_ptr< Sync::Stub> Sync::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Sync::Stub> stub(new Sync::Stub(channel));
  return stub;
}

Sync::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_checkHash_(Sync_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPeers_(Sync_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTransactions_(Sync_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_fetchStreamTransaction_(Sync_method_names[3], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}
  
::grpc::Status Sync::Stub::checkHash(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<CheckHashResponse>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_checkHash_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<CheckHashResponse>>* Sync::Stub::AsynccheckHashRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<CheckHashResponse>>(channel_.get(), cq, rpcmethod_checkHash_, context, request);
}

::grpc::Status Sync::Stub::getPeers(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<PeersResponse>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getPeers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<PeersResponse>>* Sync::Stub::AsyncgetPeersRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<PeersResponse>>(channel_.get(), cq, rpcmethod_getPeers_, context, request);
}

::grpc::Status Sync::Stub::getTransactions(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, flatbuffers::BufferRef<TransactionResponse>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getTransactions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<TransactionResponse>>* Sync::Stub::AsyncgetTransactionsRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Ping>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<TransactionResponse>>(channel_.get(), cq, rpcmethod_getTransactions_, context, request);
}

::grpc::ClientReader< flatbuffers::BufferRef<TxWithIndex>>* Sync::Stub::fetchStreamTransactionRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request) {
  return new ::grpc::ClientReader< flatbuffers::BufferRef<TxWithIndex>>(channel_.get(), rpcmethod_fetchStreamTransaction_, context, request);
}

::grpc::ClientAsyncReader< flatbuffers::BufferRef<TxWithIndex>>* Sync::Stub::AsyncfetchStreamTransactionRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<TxRequest>& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< flatbuffers::BufferRef<TxWithIndex>>(channel_.get(), cq, rpcmethod_fetchStreamTransaction_, context, request, tag);
}

Sync::Service::Service() {
  (void)Sync_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Sync_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sync::Service, flatbuffers::BufferRef<Ping>, flatbuffers::BufferRef<CheckHashResponse>>(
          std::mem_fn(&Sync::Service::checkHash), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Sync_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sync::Service, flatbuffers::BufferRef<Ping>, flatbuffers::BufferRef<PeersResponse>>(
          std::mem_fn(&Sync::Service::getPeers), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Sync_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sync::Service, flatbuffers::BufferRef<Ping>, flatbuffers::BufferRef<TransactionResponse>>(
          std::mem_fn(&Sync::Service::getTransactions), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Sync_method_names[3],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Sync::Service, flatbuffers::BufferRef<TxRequest>, flatbuffers::BufferRef<TxWithIndex>>(
          std::mem_fn(&Sync::Service::fetchStreamTransaction), this)));
}

Sync::Service::~Service() {
}

::grpc::Status Sync::Service::checkHash(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<CheckHashResponse>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sync::Service::getPeers(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<PeersResponse>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sync::Service::getTransactions(::grpc::ServerContext* context, const flatbuffers::BufferRef<Ping>* request, flatbuffers::BufferRef<TransactionResponse>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sync::Service::fetchStreamTransaction(::grpc::ServerContext* context, const flatbuffers::BufferRef<TxRequest>* request, ::grpc::ServerWriter< flatbuffers::BufferRef<TxWithIndex>>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iroha

