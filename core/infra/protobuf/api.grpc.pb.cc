// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: api.proto

#include "api.pb.h"
#include "api.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Api {

static const char* TransactionRepository_method_names[] = {
  "/Api.TransactionRepository/find",
  "/Api.TransactionRepository/fetch",
  "/Api.TransactionRepository/fetchStream",
};

std::unique_ptr< TransactionRepository::Stub> TransactionRepository::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TransactionRepository::Stub> stub(new TransactionRepository::Stub(channel));
  return stub;
}

TransactionRepository::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_find_(TransactionRepository_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_fetch_(TransactionRepository_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_fetchStream_(TransactionRepository_method_names[2], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status TransactionRepository::Stub::find(::grpc::ClientContext* context, const ::Api::Query& request, ::Api::TransactionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_find_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Api::TransactionResponse>* TransactionRepository::Stub::AsyncfindRaw(::grpc::ClientContext* context, const ::Api::Query& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Api::TransactionResponse>(channel_.get(), cq, rpcmethod_find_, context, request);
}

::grpc::Status TransactionRepository::Stub::fetch(::grpc::ClientContext* context, const ::Api::Query& request, ::Api::TransactionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_fetch_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Api::TransactionResponse>* TransactionRepository::Stub::AsyncfetchRaw(::grpc::ClientContext* context, const ::Api::Query& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Api::TransactionResponse>(channel_.get(), cq, rpcmethod_fetch_, context, request);
}

::grpc::ClientReaderWriter< ::Api::Query, ::Api::Transaction>* TransactionRepository::Stub::fetchStreamRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::Api::Query, ::Api::Transaction>(channel_.get(), rpcmethod_fetchStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::Api::Query, ::Api::Transaction>* TransactionRepository::Stub::AsyncfetchStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::Api::Query, ::Api::Transaction>(channel_.get(), cq, rpcmethod_fetchStream_, context, tag);
}

TransactionRepository::Service::Service() {
  (void)TransactionRepository_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      TransactionRepository_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransactionRepository::Service, ::Api::Query, ::Api::TransactionResponse>(
          std::mem_fn(&TransactionRepository::Service::find), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransactionRepository_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransactionRepository::Service, ::Api::Query, ::Api::TransactionResponse>(
          std::mem_fn(&TransactionRepository::Service::fetch), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransactionRepository_method_names[2],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< TransactionRepository::Service, ::Api::Query, ::Api::Transaction>(
          std::mem_fn(&TransactionRepository::Service::fetchStream), this)));
}

TransactionRepository::Service::~Service() {
}

::grpc::Status TransactionRepository::Service::find(::grpc::ServerContext* context, const ::Api::Query* request, ::Api::TransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransactionRepository::Service::fetch(::grpc::ServerContext* context, const ::Api::Query* request, ::Api::TransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransactionRepository::Service::fetchStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Api::Transaction, ::Api::Query>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AssetRepository_method_names[] = {
  "/Api.AssetRepository/find",
};

std::unique_ptr< AssetRepository::Stub> AssetRepository::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< AssetRepository::Stub> stub(new AssetRepository::Stub(channel));
  return stub;
}

AssetRepository::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_find_(AssetRepository_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AssetRepository::Stub::find(::grpc::ClientContext* context, const ::Api::Query& request, ::Api::AssetResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_find_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Api::AssetResponse>* AssetRepository::Stub::AsyncfindRaw(::grpc::ClientContext* context, const ::Api::Query& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Api::AssetResponse>(channel_.get(), cq, rpcmethod_find_, context, request);
}

AssetRepository::Service::Service() {
  (void)AssetRepository_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      AssetRepository_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< AssetRepository::Service, ::Api::Query, ::Api::AssetResponse>(
          std::mem_fn(&AssetRepository::Service::find), this)));
}

AssetRepository::Service::~Service() {
}

::grpc::Status AssetRepository::Service::find(::grpc::ServerContext* context, const ::Api::Query* request, ::Api::AssetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Sumeragi_method_names[] = {
  "/Api.Sumeragi/Torii",
  "/Api.Sumeragi/Verify",
  "/Api.Sumeragi/Kagami",
};

std::unique_ptr< Sumeragi::Stub> Sumeragi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Sumeragi::Stub> stub(new Sumeragi::Stub(channel));
  return stub;
}

Sumeragi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Torii_(Sumeragi_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(Sumeragi_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Kagami_(Sumeragi_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Sumeragi::Stub::Torii(::grpc::ClientContext* context, const ::Api::Transaction& request, ::Api::StatusResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Torii_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Api::StatusResponse>* Sumeragi::Stub::AsyncToriiRaw(::grpc::ClientContext* context, const ::Api::Transaction& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Api::StatusResponse>(channel_.get(), cq, rpcmethod_Torii_, context, request);
}

::grpc::Status Sumeragi::Stub::Verify(::grpc::ClientContext* context, const ::Api::ConsensusEvent& request, ::Api::StatusResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Verify_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Api::StatusResponse>* Sumeragi::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const ::Api::ConsensusEvent& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Api::StatusResponse>(channel_.get(), cq, rpcmethod_Verify_, context, request);
}

::grpc::Status Sumeragi::Stub::Kagami(::grpc::ClientContext* context, const ::Api::Query& request, ::Api::StatusResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Kagami_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Api::StatusResponse>* Sumeragi::Stub::AsyncKagamiRaw(::grpc::ClientContext* context, const ::Api::Query& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Api::StatusResponse>(channel_.get(), cq, rpcmethod_Kagami_, context, request);
}

Sumeragi::Service::Service() {
  (void)Sumeragi_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Sumeragi_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sumeragi::Service, ::Api::Transaction, ::Api::StatusResponse>(
          std::mem_fn(&Sumeragi::Service::Torii), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Sumeragi_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sumeragi::Service, ::Api::ConsensusEvent, ::Api::StatusResponse>(
          std::mem_fn(&Sumeragi::Service::Verify), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Sumeragi_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sumeragi::Service, ::Api::Query, ::Api::StatusResponse>(
          std::mem_fn(&Sumeragi::Service::Kagami), this)));
}

Sumeragi::Service::~Service() {
}

::grpc::Status Sumeragi::Service::Torii(::grpc::ServerContext* context, const ::Api::Transaction* request, ::Api::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sumeragi::Service::Verify(::grpc::ServerContext* context, const ::Api::ConsensusEvent* request, ::Api::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sumeragi::Service::Kagami(::grpc::ServerContext* context, const ::Api::Query* request, ::Api::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Api

